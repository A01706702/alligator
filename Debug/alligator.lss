
alligator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800100  00800100  000002d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c8f  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000991  00000000  00000000  0000107b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ef  00000000  00000000  00001a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  000020fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000569  00000000  00000000  00002234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002ee  00000000  00000000  0000279d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002a8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_6>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 32       	cpi	r26, 0x25	; 37
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  9e:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DrvCLK_SetClockDivider>:
 */


void DrvCLK_SetClockDivider(u8 u8ClkDiv)
{
	u8 btmp = 0x80 | (u8ClkDiv & 0xf);
  a6:	8f 70       	andi	r24, 0x0F	; 15
  a8:	80 68       	ori	r24, 0x80	; 128

	CLKPR = 0x80;
  aa:	e1 e6       	ldi	r30, 0x61	; 97
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	90 e8       	ldi	r25, 0x80	; 128
  b0:	90 83       	st	Z, r25
	CLKPR = btmp;
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <DrvSYS_Init>:
**********************************************************************************/  
/**
 * @fn void DrvSYS_Init(void)
 */
void DrvSYS_Init(void)
{
  b6:	cf 93       	push	r28
	u8	btmp;

	// step 1. enable clock sources
	btmp = PMCR | MCK_CLKENA;
  b8:	e2 ef       	ldi	r30, 0xF2	; 242
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	84 60       	ori	r24, 0x04	; 4
	PMCR = 0x80;
  c0:	c0 e8       	ldi	r28, 0x80	; 128
  c2:	c0 83       	st	Z, r28
	PMCR = btmp;
  c4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	98 e0       	ldi	r25, 0x08	; 8
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <DrvSYS_Init+0x14>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <DrvSYS_Init+0x1a>
  d0:	00 00       	nop
#if (MCK_OSCKEN == 1) && (MCK_MCLKSEL == 3)
	_delay_ms(20);
#endif

	// step 2. configure main clock
	btmp = (PMCR & 0x9f) | ((MCK_MCLKSEL & 0x3) << 5);
  d2:	80 81       	ld	r24, Z
  d4:	8f 79       	andi	r24, 0x9F	; 159
  d6:	80 62       	ori	r24, 0x20	; 32
	PMCR = 0x80;
  d8:	c0 83       	st	Z, r28
	PMCR = btmp;
  da:	80 83       	st	Z, r24
	
	NOP(); NOP();
  dc:	00 00       	nop
  de:	00 00       	nop

#if (MCK_CLKDIV != 3)
	DrvCLK_SetClockDivider(MCK_CLKDIV);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <DrvCLK_SetClockDivider>
#if (SYS_SWDD == 1)
	DrvMISC_DisableSWD();
#endif

#if (SYS_C6EN == 1) || (SYS_E6EN == 1)
	btmp = PMX2 | (SYS_E6EN << 1) | SYS_C6EN;
  e8:	e0 ef       	ldi	r30, 0xF0	; 240
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	82 60       	ori	r24, 0x02	; 2
	PMX2 = 0x80;
  f0:	c0 83       	st	Z, r28
	PMX2 = btmp;
  f2:	80 83       	st	Z, r24
#endif

#if (MCK_CKOSEL == 2)
	CLKPR |= 0x20;
#endif
}
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <DrvUSART_Init>:
	u8 btmp = PMX0 | (USART_TXDIO << 1) | (USART_RXDIO);
	PMX0 = 0x80;
	PMX0 = btmp;
#endif

	UCSR0A 	= (USART_MPCM0 << MPCM0) | (USART_U2X0 << U2X0);
  f8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>

	
	UCSR0C = (USART_UMSEL0 << UMSEL00 ) | (USART_UPM0 << UPM00) | (USART_USBS0 << USBS0) | \
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
		((USART_UCSZ0 & 3) << UCSZ00 ) | (USART_UCPOL0 << UCPOL0);
	UCSR0B = USART_TXREN | (USART_UCSZ0 & 4) | (USART_RXC << RXCIE0) | (USART_TXC << TXCIE0) | (USART_UDRE << UDRIE0);
 102:	88 e1       	ldi	r24, 0x18	; 24
 104:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	UBRR0H = (USART_UBRR >> 8) & 0xff;
 108:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = USART_UBRR & 0xff;
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 112:	08 95       	ret

00000114 <__vector_6>:
enum state {dormido, muestreo, envio, movimiento} estado;


// INTERRUPCION DE WDT
ISR(WDT_vect)
{
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	3f 93       	push	r19
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
	WDTCSR |= (1<<WDIF); // Borra bandera
 12a:	e0 e6       	ldi	r30, 0x60	; 96
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 68       	ori	r24, 0x80	; 128
 132:	80 83       	st	Z, r24
	cntTE++;
 134:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <cntTE>
 138:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <cntTE+0x1>
 13c:	01 96       	adiw	r24, 0x01	; 1
 13e:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <cntTE+0x1>
 142:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <cntTE>
	cntTM++;
 146:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 14e:	2f 5f       	subi	r18, 0xFF	; 255
 150:	3f 4f       	sbci	r19, 0xFF	; 255
 152:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 156:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
	if (cntTM==10)//(cntTM==113) // Muestrea sensores cada hora
 15a:	2a 30       	cpi	r18, 0x0A	; 10
 15c:	31 05       	cpc	r19, r1
 15e:	39 f4       	brne	.+14     	; 0x16e <__vector_6+0x5a>
	{
		cntTM = 0;
 160:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 164:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		estado = muestreo;
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <estado>
	} 
	if (cntTE==16)//2700) // Actualiza la nube cada 24 horas
 16e:	40 97       	sbiw	r24, 0x10	; 16
 170:	39 f4       	brne	.+14     	; 0x180 <__vector_6+0x6c>
	{
		cntTE = 0;
 172:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <cntTE+0x1>
 176:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <cntTE>
		estado = envio;
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <estado>
	}
	PORTB |=(1<<PORTB5);
 180:	85 b1       	in	r24, 0x05	; 5
 182:	80 62       	ori	r24, 0x20	; 32
 184:	85 b9       	out	0x05, r24	; 5
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	90 ee       	ldi	r25, 0xE0	; 224
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <__vector_6+0x76>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <__vector_6+0x7c>
 190:	00 00       	nop
	_delay_ms(25);
	PORTB &= ~(1 << PORTB5);
 192:	85 b1       	in	r24, 0x05	; 5
 194:	8f 7d       	andi	r24, 0xDF	; 223
 196:	85 b9       	out	0x05, r24	; 5
}
 198:	ff 91       	pop	r31
 19a:	ef 91       	pop	r30
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	3f 91       	pop	r19
 1a2:	2f 91       	pop	r18
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <main>:


int main(void)
{
	// --- Inicializa parametros ---
	cntTM = 0; // Contador de tiempo de muestreo de sensores
 1ae:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	cntTE = 0; // Contador de tiempo de envio
 1b6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <cntTE+0x1>
 1ba:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <cntTE>
	estado = dormido;
 1be:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <estado>
	// ---Inicializa reloj para wdt---
	u8 u8Reg;
	u8Reg = PMCR | (WDT_WCLKS << 4);
 1c2:	e2 ef       	ldi	r30, 0xF2	; 242
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	80 61       	ori	r24, 0x10	; 16
	PMCR = 0x80;
 1ca:	90 e8       	ldi	r25, 0x80	; 128
 1cc:	90 83       	st	Z, r25
	PMCR = u8Reg;
 1ce:	80 83       	st	Z, r24
	// ---
	
	// init_modules();  No se usa la inicializacion del builder
	DrvSYS_Init();
 1d0:	0e 94 5b 00 	call	0xb6	; 0xb6 <DrvSYS_Init>
	DrvUSART_Init(); //  Inicializa USART
 1d4:	0e 94 7c 00 	call	0xf8	; 0xf8 <DrvUSART_Init>
	//DrvTWI_Init(); // Inicializa  modulo i2c
	//lcd_inicio();	// Inicializa pantalla LCD con i2c
	//lcd_init(LCD_DISP_ON); // Inicia OLED

	//--- Inicia WDT y el modo de dormido --
	asm("cli"); //__disable_interrupt();
 1d8:	f8 94       	cli
	asm("wdr");//__watchdog_reset();
 1da:	a8 95       	wdr
	/* Start timed equence */
	WDTCSR |= (1<<WDCE) | (1<<WDE);
 1dc:	e0 e6       	ldi	r30, 0x60	; 96
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	88 61       	ori	r24, 0x18	; 24
 1e4:	80 83       	st	Z, r24
	/* Set new prescaler(time-out) value = 64K cycles (~0.5 s) */
	WDTCSR =  0b11000100; // wdif - wdie - wdp3 - wdce - wde - wpd2 - wdp1 - wpd0
 1e6:	84 ec       	ldi	r24, 0xC4	; 196
 1e8:	80 83       	st	Z, r24
	SEI(); //__enable_interrupt();
 1ea:	78 94       	sei
	SMCR = 0x05; // modo = power down, habilita sleep
 1ec:	85 e0       	ldi	r24, 0x05	; 5
 1ee:	83 bf       	out	0x33, r24	; 51
	// ---
	//Indicacion de arranque
	DDRB = 0xff; // prende un led o...
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x01; 
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	85 b9       	out	0x05, r24	; 5
 1f8:	2f ef       	ldi	r18, 0xFF	; 255
 1fa:	8f e0       	ldi	r24, 0x0F	; 15
 1fc:	9e e0       	ldi	r25, 0x0E	; 14
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0x50>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0x5a>
 208:	00 00       	nop
	_delay_ms(500);
	PORTB = 0x00;
 20a:	15 b8       	out	0x05, r1	; 5
	oledPutString("0123456789!@#$%^&*()-", 3, 0);
	*/
	
	
	//Configuracion de puerto de acuerdo al hardware
	DDRD |= (0x01<<PORTD1);
 20c:	8a b1       	in	r24, 0x0a	; 10
 20e:	82 60       	ori	r24, 0x02	; 2
 210:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x02;
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	8b b9       	out	0x0b, r24	; 11

	while (1)
	{
		switch(estado)
 216:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <estado>
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	49 f0       	breq	.+18     	; 0x230 <main+0x82>
 21e:	28 f0       	brcs	.+10     	; 0x22a <main+0x7c>
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	59 f0       	breq	.+22     	; 0x23a <main+0x8c>
 224:	83 30       	cpi	r24, 0x03	; 3
 226:	71 f0       	breq	.+28     	; 0x244 <main+0x96>
 228:	12 c0       	rjmp	.+36     	; 0x24e <main+0xa0>
		{
			case dormido:
				PORTB = 0x01;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	85 b9       	out	0x05, r24	; 5
				break;
 22e:	11 c0       	rjmp	.+34     	; 0x252 <main+0xa4>
			
			case muestreo:
				//iluminacion();
				//temperatura();
				PORTB = 0x02;
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	85 b9       	out	0x05, r24	; 5
				estado = dormido;
 234:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <estado>
				break;
 238:	0c c0       	rjmp	.+24     	; 0x252 <main+0xa4>
			
			case envio:
				PORTB = 0x04;
 23a:	84 e0       	ldi	r24, 0x04	; 4
 23c:	85 b9       	out	0x05, r24	; 5
				estado = dormido;
 23e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <estado>
				break;
 242:	07 c0       	rjmp	.+14     	; 0x252 <main+0xa4>
			
			case movimiento:
				PORTB = 0x08;
 244:	88 e0       	ldi	r24, 0x08	; 8
 246:	85 b9       	out	0x05, r24	; 5
				estado = dormido;
 248:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <estado>
				break;
 24c:	02 c0       	rjmp	.+4      	; 0x252 <main+0xa4>
			
			default:
				estado = dormido;
 24e:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <estado>
				break;
		}
		
		asm("sleep");
 252:	88 95       	sleep
		asm("nop");
 254:	00 00       	nop
		asm("nop");	
 256:	00 00       	nop
	}
 258:	de cf       	rjmp	.-68     	; 0x216 <main+0x68>

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
