
alligator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000046c  00000500  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000046c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800104  00800104  00000504  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013bf  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a80  00000000  00000000  00001a5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ba9  00000000  00000000  000024db  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00003084  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c0  00000000  00000000  0000331c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b30  00000000  00000000  000039dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0000450c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 42 00 	jmp	0x84	; 0x84 <__ctors_end>
   4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  60:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	ae 20       	and	r10, r14
  6a:	02 b0       	in	r0, 0x02	; 2
  6c:	c8 00       	.word	0x00c8	; ????
  6e:	10 40       	sbci	r17, 0x00	; 0
  70:	81 3f       	cpi	r24, 0xF1	; 241
  72:	a1 a6       	std	Z+41, r10	; 0x29
  74:	a8 3f       	cpi	r26, 0xF8	; 248
  76:	a4 d3       	rcall	.+1864   	; 0x7c0 <__data_load_end+0x350>
  78:	00 d5       	rcall	.+2560   	; 0xa7a <__stack+0x17b>
  7a:	f0 d9       	rcall	.-3104   	; 0xfffff45c <__eeprom_end+0xff7ef45c>
  7c:	22 da       	rcall	.-3004   	; 0xfffff4c2 <__eeprom_end+0xff7ef4c2>
  7e:	12 db       	rcall	.-2524   	; 0xfffff6a4 <__eeprom_end+0xff7ef6a4>
  80:	20 8d       	ldd	r18, Z+24	; 0x18
  82:	14 00       	.word	0x0014	; ????

00000084 <__ctors_end>:
  84:	11 24       	eor	r1, r1
  86:	1f be       	out	0x3f, r1	; 63
  88:	cf ef       	ldi	r28, 0xFF	; 255
  8a:	d8 e0       	ldi	r29, 0x08	; 8
  8c:	de bf       	out	0x3e, r29	; 62
  8e:	cd bf       	out	0x3d, r28	; 61

00000090 <__do_copy_data>:
  90:	11 e0       	ldi	r17, 0x01	; 1
  92:	a0 e0       	ldi	r26, 0x00	; 0
  94:	b1 e0       	ldi	r27, 0x01	; 1
  96:	ec e6       	ldi	r30, 0x6C	; 108
  98:	f4 e0       	ldi	r31, 0x04	; 4
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <__do_copy_data+0x10>
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	a4 30       	cpi	r26, 0x04	; 4
  a2:	b1 07       	cpc	r27, r17
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0xc>

000000a6 <__do_clear_bss>:
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	a4 e0       	ldi	r26, 0x04	; 4
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
  ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
  b0:	a5 32       	cpi	r26, 0x25	; 37
  b2:	b2 07       	cpc	r27, r18
  b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
  b6:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  ba:	0c 94 34 02 	jmp	0x468	; 0x468 <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <DrvTWI_SetBitrate>:
	sbi(TWCR, TWEA);
	//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
}

void DrvTWI_SetBitrate(u16 bitrateKHz)
{
  c2:	bc 01       	movw	r22, r24
	// set i2c bitrate
	// SCL freq = F_CPU/(16+2*TWBR))
	#ifdef TWPS0
	// SCL freq = F_CPU/(16+2*TWBR*4^TWPS)
	// set TWPS to zero
	cbi(TWSR, TWPS0);
  c4:	e9 eb       	ldi	r30, 0xB9	; 185
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	80 83       	st	Z, r24
	cbi(TWSR, TWPS1);
  ce:	80 81       	ld	r24, Z
  d0:	8d 7f       	andi	r24, 0xFD	; 253
  d2:	80 83       	st	Z, r24
	#endif
	
	// calculate bitrate division	
	bitrate_div = ((F_CPU/1000L)/bitrateKHz);
  d4:	80 ea       	ldi	r24, 0xA0	; 160
  d6:	9f e0       	ldi	r25, 0x0F	; 15
  d8:	0e 94 20 02 	call	0x440	; 0x440 <__udivmodhi4>
  dc:	86 2f       	mov	r24, r22
	if(bitrate_div >= 16)
  de:	60 31       	cpi	r22, 0x10	; 16
  e0:	48 f0       	brcs	.+18     	; 0xf4 <DrvTWI_SetBitrate+0x32>
		bitrate_div = (bitrate_div - 16)/2;
  e2:	77 27       	eor	r23, r23
  e4:	60 51       	subi	r22, 0x10	; 16
  e6:	71 09       	sbc	r23, r1
  e8:	cb 01       	movw	r24, r22
  ea:	99 23       	and	r25, r25
  ec:	0c f4       	brge	.+2      	; 0xf0 <DrvTWI_SetBitrate+0x2e>
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	95 95       	asr	r25
  f2:	87 95       	ror	r24

	outb(TWBR, bitrate_div);
  f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  f8:	08 95       	ret

000000fa <DrvTWI_Init>:
#if (TWI_BITRATE == 0)
	outb(TWBR, TWI_TWBR);
	outb(TWSR, TWI_TWPS);
#else
	// set i2c bit rate
	DrvTWI_SetBitrate(TWI_BITRATE);
  fa:	80 e9       	ldi	r24, 0x90	; 144
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	0e 94 61 00 	call	0xc2	; 0xc2 <DrvTWI_SetBitrate>
#endif	
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);
 102:	ec eb       	ldi	r30, 0xBC	; 188
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	84 60       	ori	r24, 0x04	; 4
 10a:	80 83       	st	Z, r24
	// set state
	twiState = I2C_IDLE;
 10c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	// enable TWI interrupt and slave address ACK
	sbi(TWCR, TWIE);
 110:	80 81       	ld	r24, Z
 112:	81 60       	ori	r24, 0x01	; 1
 114:	80 83       	st	Z, r24
	sbi(TWCR, TWEA);
 116:	80 81       	ld	r24, Z
 118:	80 64       	ori	r24, 0x40	; 64
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret

0000011e <DrvUSART_Init>:
	u8 btmp = PMX0 | (USART_TXDIO << 1) | (USART_RXDIO);
	PMX0 = 0x80;
	PMX0 = btmp;
#endif

	UCSR0A 	= (USART_MPCM0 << MPCM0) | (USART_U2X0 << U2X0);
 11e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>

	
	UCSR0C = (USART_UMSEL0 << UMSEL00 ) | (USART_UPM0 << UPM00) | (USART_USBS0 << USBS0) | \
 122:	86 e0       	ldi	r24, 0x06	; 6
 124:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
		((USART_UCSZ0 & 3) << UCSZ00 ) | (USART_UCPOL0 << UCPOL0);
	UCSR0B = USART_TXREN | (USART_UCSZ0 & 4) | (USART_RXC << RXCIE0) | (USART_TXC << TXCIE0) | (USART_UDRE << UDRIE0);
 128:	88 e1       	ldi	r24, 0x18	; 24
 12a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	UBRR0H = (USART_UBRR >> 8) & 0xff;
 12e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = USART_UBRR & 0xff;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 138:	08 95       	ret

0000013a <DrvUSART_SendChar>:
/**
 * @fn void DrvUSART_TransChar(u8 u8Char)
 */
void DrvUSART_SendChar(u8 u8Char)
{
	while(!(UCSR0A & (1 << UDRE0)));
 13a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 13e:	95 ff       	sbrs	r25, 5
 140:	fc cf       	rjmp	.-8      	; 0x13a <DrvUSART_SendChar>
	UDR0 = u8Char;
 142:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 146:	08 95       	ret

00000148 <DrvUSART_GetChar>:
/**
 * @fn u8 DrvUSART_RecvChar(void)
 */
u8 DrvUSART_GetChar(void)
{
	while(!(UCSR0A & (1 << RXC0)));
 148:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 14c:	88 23       	and	r24, r24
 14e:	e4 f7       	brge	.-8      	; 0x148 <DrvUSART_GetChar>
	return UDR0;
 150:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 154:	08 95       	ret

00000156 <DrvUSART_SendStr>:

/**
 * @fn void DrvUSART_SendStr(char *str)
 */
void DrvUSART_SendStr(char *str)
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	ec 01       	movw	r28, r24
	char *pt = str;

	while(*pt)
 15c:	03 c0       	rjmp	.+6      	; 0x164 <DrvUSART_SendStr+0xe>
	{
		DrvUSART_SendChar(*pt++);
 15e:	21 96       	adiw	r28, 0x01	; 1
 160:	0e 94 9d 00 	call	0x13a	; 0x13a <DrvUSART_SendChar>
 */
void DrvUSART_SendStr(char *str)
{
	char *pt = str;

	while(*pt)
 164:	88 81       	ld	r24, Y
 166:	81 11       	cpse	r24, r1
 168:	fa cf       	rjmp	.-12     	; 0x15e <DrvUSART_SendStr+0x8>
	{
		DrvUSART_SendChar(*pt++);
	}
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <leeUART>:
	}
	return 0;
}


void leeUART(){
 170:	1f 93       	push	r17
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
	int i=0;
	char contLF=2;
 176:	12 e0       	ldi	r17, 0x02	; 2
	return 0;
}


void leeUART(){
	int i=0;
 178:	c0 e0       	ldi	r28, 0x00	; 0
 17a:	d0 e0       	ldi	r29, 0x00	; 0
	char contLF=2;
	char caracter;
	while(contLF){
 17c:	10 c0       	rjmp	.+32     	; 0x19e <leeUART+0x2e>
		caracter = DrvUSART_GetChar();
 17e:	0e 94 a4 00 	call	0x148	; 0x148 <DrvUSART_GetChar>
		if (caracter==0x0a) // Si caracter es igual a line feed
 182:	8a 30       	cpi	r24, 0x0A	; 10
 184:	39 f4       	brne	.+14     	; 0x194 <leeUART+0x24>
		{
			contLF--;
 186:	11 50       	subi	r17, 0x01	; 1
			INBUFF[i]=caracter;
 188:	fe 01       	movw	r30, r28
 18a:	eb 5f       	subi	r30, 0xFB	; 251
 18c:	fe 4f       	sbci	r31, 0xFE	; 254
 18e:	80 83       	st	Z, r24
			i++;
 190:	21 96       	adiw	r28, 0x01	; 1
 192:	05 c0       	rjmp	.+10     	; 0x19e <leeUART+0x2e>
		} 
		else
		{
			INBUFF[i]=caracter;
 194:	fe 01       	movw	r30, r28
 196:	eb 5f       	subi	r30, 0xFB	; 251
 198:	fe 4f       	sbci	r31, 0xFE	; 254
 19a:	80 83       	st	Z, r24
			i++;
 19c:	21 96       	adiw	r28, 0x01	; 1

void leeUART(){
	int i=0;
	char contLF=2;
	char caracter;
	while(contLF){
 19e:	11 11       	cpse	r17, r1
 1a0:	ee cf       	rjmp	.-36     	; 0x17e <leeUART+0xe>
			INBUFF[i]=caracter;
			i++;
		}
		
	}
}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	08 95       	ret

000001aa <showBuff>:

void showBuff(){
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
	int i=0;
	char caracter=0x00;
 1b0:	c0 e0       	ldi	r28, 0x00	; 0
		
	}
}

void showBuff(){
	int i=0;
 1b2:	00 e0       	ldi	r16, 0x00	; 0
 1b4:	10 e0       	ldi	r17, 0x00	; 0
	char caracter=0x00;
	
	while(caracter!=0x0a)
 1b6:	0d c0       	rjmp	.+26     	; 0x1d2 <showBuff+0x28>
	{
		caracter = INBUFF[i];
 1b8:	f8 01       	movw	r30, r16
 1ba:	eb 5f       	subi	r30, 0xFB	; 251
 1bc:	fe 4f       	sbci	r31, 0xFE	; 254
 1be:	c0 81       	ld	r28, Z
		i++;
 1c0:	0f 5f       	subi	r16, 0xFF	; 255
 1c2:	1f 4f       	sbci	r17, 0xFF	; 255
		
		if (caracter != 0x0d)
 1c4:	cd 30       	cpi	r28, 0x0D	; 13
 1c6:	29 f0       	breq	.+10     	; 0x1d2 <showBuff+0x28>
		{
			if (caracter != 0x0a)
 1c8:	ca 30       	cpi	r28, 0x0A	; 10
 1ca:	19 f0       	breq	.+6      	; 0x1d2 <showBuff+0x28>
			{
				tst_data(caracter);
 1cc:	8c 2f       	mov	r24, r28
 1ce:	0e 94 58 01 	call	0x2b0	; 0x2b0 <tst_data>

void showBuff(){
	int i=0;
	char caracter=0x00;
	
	while(caracter!=0x0a)
 1d2:	ca 30       	cpi	r28, 0x0A	; 10
 1d4:	89 f7       	brne	.-30     	; 0x1b8 <showBuff+0xe>
			{
				tst_data(caracter);
			}
		}	
	}
 1d6:	cf 91       	pop	r28
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

000001de <main>:

int main(void)
{
	// Device initialization
	//p init_modules(); //del builder
	DrvUSART_Init(); //  Inicializa USART
 1de:	0e 94 8f 00 	call	0x11e	; 0x11e <DrvUSART_Init>
	DrvTWI_Init(); // Inicializa  modulo i2c
 1e2:	0e 94 7d 00 	call	0xfa	; 0xfa <DrvTWI_Init>
	// Global interrupt enable
	//p SEI();
	DDRD |= (0x01<<PORTD1);
 1e6:	8a b1       	in	r24, 0x0a	; 10
 1e8:	82 60       	ori	r24, 0x02	; 2
 1ea:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x02;
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	8b b9       	out	0x0b, r24	; 11
	

	DDRB = 0xff;
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x01;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f8:	2f e7       	ldi	r18, 0x7F	; 127
 1fa:	8a e1       	ldi	r24, 0x1A	; 26
 1fc:	96 e0       	ldi	r25, 0x06	; 6
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0x20>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0x2a>
 208:	00 00       	nop
	_delay_ms(500);
	PORTB = 0x00;
 20a:	15 b8       	out	0x05, r1	; 5
	
	
	lcd_init(LCD_DISP_ON); // Inicia OLED
 20c:	8f ea       	ldi	r24, 0xAF	; 175
 20e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <lcd_init>
	FillDisplay(0x00);		//ssd1306_lcd_clrscr();	// Limpia OLED
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	0e 94 02 02 	call	0x404	; 0x404 <FillDisplay>
		DrvTWI_WaitForComplete();
		
		DrvTWI_SendStop();
		while( !(inb(TWCR) & BV(TWSTO)) );//i2c_driver_stop();
		*/
		DrvUSART_SendStr("AT\n");
 218:	80 e0       	ldi	r24, 0x00	; 0
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 ab 00 	call	0x156	; 0x156 <DrvUSART_SendStr>
 220:	2f e7       	ldi	r18, 0x7F	; 127
 222:	88 e3       	ldi	r24, 0x38	; 56
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	21 50       	subi	r18, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <main+0x48>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0x52>
 230:	00 00       	nop
		_delay_ms(100);
		
		leeUART();
 232:	0e 94 b8 00 	call	0x170	; 0x170 <leeUART>
		showBuff();
 236:	0e 94 d5 00 	call	0x1aa	; 0x1aa <showBuff>
 23a:	ee cf       	rjmp	.-36     	; 0x218 <main+0x3a>

0000023c <tst_comando>:
	{
		oledWriteChar1x(*ptr,page,i);
		ptr++;
		i+=6;
	}
}
 23c:	ec eb       	ldi	r30, 0xBC	; 188
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	90 81       	ld	r25, Z
 242:	9f 70       	andi	r25, 0x0F	; 15
 244:	90 6a       	ori	r25, 0xA0	; 160
 246:	90 83       	st	Z, r25
 248:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 24c:	99 23       	and	r25, r25
 24e:	e4 f7       	brge	.-8      	; 0x248 <tst_comando+0xc>
 250:	98 e7       	ldi	r25, 0x78	; 120
 252:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 256:	ec eb       	ldi	r30, 0xBC	; 188
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	90 81       	ld	r25, Z
 25c:	9f 70       	andi	r25, 0x0F	; 15
 25e:	90 68       	ori	r25, 0x80	; 128
 260:	90 83       	st	Z, r25
 262:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 266:	99 23       	and	r25, r25
 268:	e4 f7       	brge	.-8      	; 0x262 <tst_comando+0x26>
 26a:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 26e:	ec eb       	ldi	r30, 0xBC	; 188
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	90 81       	ld	r25, Z
 274:	9f 70       	andi	r25, 0x0F	; 15
 276:	90 68       	ori	r25, 0x80	; 128
 278:	90 83       	st	Z, r25
 27a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 27e:	99 23       	and	r25, r25
 280:	e4 f7       	brge	.-8      	; 0x27a <tst_comando+0x3e>
 282:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 286:	ec eb       	ldi	r30, 0xBC	; 188
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	8f 70       	andi	r24, 0x0F	; 15
 28e:	80 68       	ori	r24, 0x80	; 128
 290:	80 83       	st	Z, r24
 292:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 296:	88 23       	and	r24, r24
 298:	e4 f7       	brge	.-8      	; 0x292 <tst_comando+0x56>
 29a:	ec eb       	ldi	r30, 0xBC	; 188
 29c:	f0 e0       	ldi	r31, 0x00	; 0
 29e:	80 81       	ld	r24, Z
 2a0:	8f 70       	andi	r24, 0x0F	; 15
 2a2:	80 6d       	ori	r24, 0xD0	; 208
 2a4:	80 83       	st	Z, r24
 2a6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2aa:	84 ff       	sbrs	r24, 4
 2ac:	fc cf       	rjmp	.-8      	; 0x2a6 <tst_comando+0x6a>
 2ae:	08 95       	ret

000002b0 <tst_data>:
 2b0:	ec eb       	ldi	r30, 0xBC	; 188
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	90 81       	ld	r25, Z
 2b6:	9f 70       	andi	r25, 0x0F	; 15
 2b8:	90 6a       	ori	r25, 0xA0	; 160
 2ba:	90 83       	st	Z, r25
 2bc:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2c0:	99 23       	and	r25, r25
 2c2:	e4 f7       	brge	.-8      	; 0x2bc <tst_data+0xc>
 2c4:	98 e7       	ldi	r25, 0x78	; 120
 2c6:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 2ca:	ec eb       	ldi	r30, 0xBC	; 188
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	90 81       	ld	r25, Z
 2d0:	9f 70       	andi	r25, 0x0F	; 15
 2d2:	90 68       	ori	r25, 0x80	; 128
 2d4:	90 83       	st	Z, r25
 2d6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2da:	99 23       	and	r25, r25
 2dc:	e4 f7       	brge	.-8      	; 0x2d6 <tst_data+0x26>
 2de:	90 e4       	ldi	r25, 0x40	; 64
 2e0:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 2e4:	ec eb       	ldi	r30, 0xBC	; 188
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	90 81       	ld	r25, Z
 2ea:	9f 70       	andi	r25, 0x0F	; 15
 2ec:	90 68       	ori	r25, 0x80	; 128
 2ee:	90 83       	st	Z, r25
 2f0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2f4:	99 23       	and	r25, r25
 2f6:	e4 f7       	brge	.-8      	; 0x2f0 <tst_data+0x40>
 2f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 2fc:	ec eb       	ldi	r30, 0xBC	; 188
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	8f 70       	andi	r24, 0x0F	; 15
 304:	80 68       	ori	r24, 0x80	; 128
 306:	80 83       	st	Z, r24
 308:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 30c:	88 23       	and	r24, r24
 30e:	e4 f7       	brge	.-8      	; 0x308 <tst_data+0x58>
 310:	ec eb       	ldi	r30, 0xBC	; 188
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	8f 70       	andi	r24, 0x0F	; 15
 318:	80 6d       	ori	r24, 0xD0	; 208
 31a:	80 83       	st	Z, r24
 31c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 320:	84 ff       	sbrs	r24, 4
 322:	fc cf       	rjmp	.-8      	; 0x31c <tst_data+0x6c>
 324:	08 95       	ret

00000326 <lcd_command>:
 326:	ac 01       	movw	r20, r24
 328:	ec eb       	ldi	r30, 0xBC	; 188
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	8f 70       	andi	r24, 0x0F	; 15
 330:	80 6a       	ori	r24, 0xA0	; 160
 332:	80 83       	st	Z, r24
 334:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 338:	99 23       	and	r25, r25
 33a:	e4 f7       	brge	.-8      	; 0x334 <lcd_command+0xe>
 33c:	88 e7       	ldi	r24, 0x78	; 120
 33e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 342:	ec eb       	ldi	r30, 0xBC	; 188
 344:	f0 e0       	ldi	r31, 0x00	; 0
 346:	80 81       	ld	r24, Z
 348:	8f 70       	andi	r24, 0x0F	; 15
 34a:	80 68       	ori	r24, 0x80	; 128
 34c:	80 83       	st	Z, r24
 34e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 352:	99 23       	and	r25, r25
 354:	e4 f7       	brge	.-8      	; 0x34e <lcd_command+0x28>
 356:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 35a:	ec eb       	ldi	r30, 0xBC	; 188
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	8f 70       	andi	r24, 0x0F	; 15
 362:	80 68       	ori	r24, 0x80	; 128
 364:	80 83       	st	Z, r24
 366:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 36a:	99 23       	and	r25, r25
 36c:	e4 f7       	brge	.-8      	; 0x366 <lcd_command+0x40>
 36e:	20 e0       	ldi	r18, 0x00	; 0
 370:	11 c0       	rjmp	.+34     	; 0x394 <lcd_command+0x6e>
 372:	fa 01       	movw	r30, r20
 374:	e2 0f       	add	r30, r18
 376:	f1 1d       	adc	r31, r1
 378:	90 81       	ld	r25, Z
 37a:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 37e:	ec eb       	ldi	r30, 0xBC	; 188
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	90 81       	ld	r25, Z
 384:	9f 70       	andi	r25, 0x0F	; 15
 386:	90 68       	ori	r25, 0x80	; 128
 388:	90 83       	st	Z, r25
 38a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 38e:	99 23       	and	r25, r25
 390:	e4 f7       	brge	.-8      	; 0x38a <lcd_command+0x64>
 392:	2f 5f       	subi	r18, 0xFF	; 255
 394:	26 17       	cp	r18, r22
 396:	68 f3       	brcs	.-38     	; 0x372 <lcd_command+0x4c>
 398:	ec eb       	ldi	r30, 0xBC	; 188
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	8f 70       	andi	r24, 0x0F	; 15
 3a0:	80 6d       	ori	r24, 0xD0	; 208
 3a2:	80 83       	st	Z, r24
 3a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3a8:	84 ff       	sbrs	r24, 4
 3aa:	fc cf       	rjmp	.-8      	; 0x3a4 <lcd_command+0x7e>
 3ac:	08 95       	ret

000003ae <lcd_init>:
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
 3b6:	6c 97       	sbiw	r28, 0x1c	; 28
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	f8 94       	cli
 3bc:	de bf       	out	0x3e, r29	; 62
 3be:	0f be       	out	0x3f, r0	; 63
 3c0:	cd bf       	out	0x3d, r28	; 61
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	0e c0       	rjmp	.+28     	; 0x3e2 <lcd_init+0x34>
 3c6:	29 2f       	mov	r18, r25
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	f9 01       	movw	r30, r18
 3cc:	e8 59       	subi	r30, 0x98	; 152
 3ce:	ff 4f       	sbci	r31, 0xFF	; 255
 3d0:	e4 91       	lpm	r30, Z
 3d2:	a1 e0       	ldi	r26, 0x01	; 1
 3d4:	b0 e0       	ldi	r27, 0x00	; 0
 3d6:	ac 0f       	add	r26, r28
 3d8:	bd 1f       	adc	r27, r29
 3da:	a2 0f       	add	r26, r18
 3dc:	b3 1f       	adc	r27, r19
 3de:	ec 93       	st	X, r30
 3e0:	9f 5f       	subi	r25, 0xFF	; 255
 3e2:	9b 31       	cpi	r25, 0x1B	; 27
 3e4:	80 f3       	brcs	.-32     	; 0x3c6 <lcd_init+0x18>
 3e6:	8c 8f       	std	Y+28, r24	; 0x1c
 3e8:	6c e1       	ldi	r22, 0x1C	; 28
 3ea:	ce 01       	movw	r24, r28
 3ec:	01 96       	adiw	r24, 0x01	; 1
 3ee:	0e 94 93 01 	call	0x326	; 0x326 <lcd_command>
 3f2:	6c 96       	adiw	r28, 0x1c	; 28
 3f4:	0f b6       	in	r0, 0x3f	; 63
 3f6:	f8 94       	cli
 3f8:	de bf       	out	0x3e, r29	; 62
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	cd bf       	out	0x3d, r28	; 61
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	08 95       	ret

00000404 <FillDisplay>:


void FillDisplay(unsigned char data)
{
 404:	1f 93       	push	r17
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	d8 2f       	mov	r29, r24
	unsigned char i,j;

	for(i=0xB0;i<0xB8;i++)			// Go through all 8 pages
 40c:	10 eb       	ldi	r17, 0xB0	; 176
 40e:	12 c0       	rjmp	.+36     	; 0x434 <FillDisplay+0x30>
	{
		tst_comando(i);		// Set page
 410:	81 2f       	mov	r24, r17
 412:	0e 94 1e 01 	call	0x23c	; 0x23c <tst_comando>
		tst_comando(0x00+OFFSET);		// Set lower column address
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	0e 94 1e 01 	call	0x23c	; 0x23c <tst_comando>
		tst_comando(0x10);		// Set upper column address
 41c:	80 e1       	ldi	r24, 0x10	; 16
 41e:	0e 94 1e 01 	call	0x23c	; 0x23c <tst_comando>

		for(j=0;j<132;j++)			// Write to all 132 bytes
 422:	c0 e0       	ldi	r28, 0x00	; 0
 424:	04 c0       	rjmp	.+8      	; 0x42e <FillDisplay+0x2a>
		{
			tst_data(data);
 426:	8d 2f       	mov	r24, r29
 428:	0e 94 58 01 	call	0x2b0	; 0x2b0 <tst_data>
	{
		tst_comando(i);		// Set page
		tst_comando(0x00+OFFSET);		// Set lower column address
		tst_comando(0x10);		// Set upper column address

		for(j=0;j<132;j++)			// Write to all 132 bytes
 42c:	cf 5f       	subi	r28, 0xFF	; 255
 42e:	c4 38       	cpi	r28, 0x84	; 132
 430:	d0 f3       	brcs	.-12     	; 0x426 <FillDisplay+0x22>

void FillDisplay(unsigned char data)
{
	unsigned char i,j;

	for(i=0xB0;i<0xB8;i++)			// Go through all 8 pages
 432:	1f 5f       	subi	r17, 0xFF	; 255
 434:	18 3b       	cpi	r17, 0xB8	; 184
 436:	60 f3       	brcs	.-40     	; 0x410 <FillDisplay+0xc>
		{
			tst_data(data);
		}
	}
	return;
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	1f 91       	pop	r17
 43e:	08 95       	ret

00000440 <__udivmodhi4>:
 440:	aa 1b       	sub	r26, r26
 442:	bb 1b       	sub	r27, r27
 444:	51 e1       	ldi	r21, 0x11	; 17
 446:	07 c0       	rjmp	.+14     	; 0x456 <__udivmodhi4_ep>

00000448 <__udivmodhi4_loop>:
 448:	aa 1f       	adc	r26, r26
 44a:	bb 1f       	adc	r27, r27
 44c:	a6 17       	cp	r26, r22
 44e:	b7 07       	cpc	r27, r23
 450:	10 f0       	brcs	.+4      	; 0x456 <__udivmodhi4_ep>
 452:	a6 1b       	sub	r26, r22
 454:	b7 0b       	sbc	r27, r23

00000456 <__udivmodhi4_ep>:
 456:	88 1f       	adc	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	5a 95       	dec	r21
 45c:	a9 f7       	brne	.-22     	; 0x448 <__udivmodhi4_loop>
 45e:	80 95       	com	r24
 460:	90 95       	com	r25
 462:	bc 01       	movw	r22, r24
 464:	cd 01       	movw	r24, r26
 466:	08 95       	ret

00000468 <_exit>:
 468:	f8 94       	cli

0000046a <__stop_program>:
 46a:	ff cf       	rjmp	.-2      	; 0x46a <__stop_program>
