
alligator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  0000045c  000004f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000045c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080011c  0080011c  0000050c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c2e  00000000  00000000  0000076c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c4b  00000000  00000000  0000239a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e32  00000000  00000000  00002fe5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  00003e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000804  00000000  00000000  000041e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d27  00000000  00000000  000049e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  0000570b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e1       	ldi	r26, 0x1C	; 28
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 33       	cpi	r26, 0x3D	; 61
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <main>
  9e:	0c 94 2c 02 	jmp	0x458	; 0x458 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DrvCLK_SetClockDivider>:
 */


void DrvCLK_SetClockDivider(u8 u8ClkDiv)
{
	u8 btmp = 0x80 | (u8ClkDiv & 0xf);
  a6:	8f 70       	andi	r24, 0x0F	; 15
  a8:	80 68       	ori	r24, 0x80	; 128

	CLKPR = 0x80;
  aa:	e1 e6       	ldi	r30, 0x61	; 97
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	90 e8       	ldi	r25, 0x80	; 128
  b0:	90 83       	st	Z, r25
	CLKPR = btmp;
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <DrvSYS_Init>:
**********************************************************************************/  
/**
 * @fn void DrvSYS_Init(void)
 */
void DrvSYS_Init(void)
{
  b6:	cf 93       	push	r28
	u8	btmp;

	// step 1. enable clock sources
	btmp = PMCR | MCK_CLKENA;
  b8:	e2 ef       	ldi	r30, 0xF2	; 242
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	84 60       	ori	r24, 0x04	; 4
	PMCR = 0x80;
  c0:	c0 e8       	ldi	r28, 0x80	; 128
  c2:	c0 83       	st	Z, r28
	PMCR = btmp;
  c4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	98 e0       	ldi	r25, 0x08	; 8
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <DrvSYS_Init+0x14>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <DrvSYS_Init+0x1a>
  d0:	00 00       	nop
#if (MCK_OSCKEN == 1) && (MCK_MCLKSEL == 3)
	_delay_ms(20);
#endif

	// step 2. configure main clock
	btmp = (PMCR & 0x9f) | ((MCK_MCLKSEL & 0x3) << 5);
  d2:	80 81       	ld	r24, Z
  d4:	8f 79       	andi	r24, 0x9F	; 159
  d6:	80 62       	ori	r24, 0x20	; 32
	PMCR = 0x80;
  d8:	c0 83       	st	Z, r28
	PMCR = btmp;
  da:	80 83       	st	Z, r24
	
	NOP(); NOP();
  dc:	00 00       	nop
  de:	00 00       	nop

#if (MCK_CLKDIV != 3)
	DrvCLK_SetClockDivider(MCK_CLKDIV);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <DrvCLK_SetClockDivider>
#if (SYS_SWDD == 1)
	DrvMISC_DisableSWD();
#endif

#if (SYS_C6EN == 1) || (SYS_E6EN == 1)
	btmp = PMX2 | (SYS_E6EN << 1) | SYS_C6EN;
  e8:	e0 ef       	ldi	r30, 0xF0	; 240
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	82 60       	ori	r24, 0x02	; 2
	PMX2 = 0x80;
  f0:	c0 83       	st	Z, r28
	PMX2 = btmp;
  f2:	80 83       	st	Z, r24
#endif

#if (MCK_CKOSEL == 2)
	CLKPR |= 0x20;
#endif
}
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <DrvTWI_SetBitrate>:
	sbi(TWCR, TWEA);
	//outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
}

void DrvTWI_SetBitrate(u16 bitrateKHz)
{
  f8:	bc 01       	movw	r22, r24
	// set i2c bitrate
	// SCL freq = F_CPU/(16+2*TWBR))
	#ifdef TWPS0
	// SCL freq = F_CPU/(16+2*TWBR*4^TWPS)
	// set TWPS to zero
	cbi(TWSR, TWPS0);
  fa:	e9 eb       	ldi	r30, 0xB9	; 185
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	8e 7f       	andi	r24, 0xFE	; 254
 102:	80 83       	st	Z, r24
	cbi(TWSR, TWPS1);
 104:	80 81       	ld	r24, Z
 106:	8d 7f       	andi	r24, 0xFD	; 253
 108:	80 83       	st	Z, r24
	#endif
	
	// calculate bitrate division	
	bitrate_div = ((F_CPU/1000L)/bitrateKHz);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	94 e2       	ldi	r25, 0x24	; 36
 10e:	0e 94 18 02 	call	0x430	; 0x430 <__udivmodhi4>
 112:	86 2f       	mov	r24, r22
	if(bitrate_div >= 16)
 114:	60 31       	cpi	r22, 0x10	; 16
 116:	48 f0       	brcs	.+18     	; 0x12a <DrvTWI_SetBitrate+0x32>
		bitrate_div = (bitrate_div - 16)/2;
 118:	77 27       	eor	r23, r23
 11a:	60 51       	subi	r22, 0x10	; 16
 11c:	71 09       	sbc	r23, r1
 11e:	cb 01       	movw	r24, r22
 120:	99 23       	and	r25, r25
 122:	0c f4       	brge	.+2      	; 0x126 <DrvTWI_SetBitrate+0x2e>
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	95 95       	asr	r25
 128:	87 95       	ror	r24

	outb(TWBR, bitrate_div);
 12a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 12e:	08 95       	ret

00000130 <DrvTWI_Init>:
#if (TWI_BITRATE == 0)
	outb(TWBR, TWI_TWBR);
	outb(TWSR, TWI_TWPS);
#else
	// set i2c bit rate
	DrvTWI_SetBitrate(TWI_BITRATE);
 130:	84 e6       	ldi	r24, 0x64	; 100
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 7c 00 	call	0xf8	; 0xf8 <DrvTWI_SetBitrate>
#endif	
	// enable TWI (two-wire interface)
	sbi(TWCR, TWEN);
 138:	ec eb       	ldi	r30, 0xBC	; 188
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	84 60       	ori	r24, 0x04	; 4
 140:	80 83       	st	Z, r24
	// set state
	twiState = I2C_IDLE;
 142:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
	// enable TWI interrupt and slave address ACK
	sbi(TWCR, TWIE);
 146:	80 81       	ld	r24, Z
 148:	81 60       	ori	r24, 0x01	; 1
 14a:	80 83       	st	Z, r24
	sbi(TWCR, TWEA);
 14c:	80 81       	ld	r24, Z
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	80 83       	st	Z, r24
 152:	08 95       	ret

00000154 <DrvUSART_Init>:
	u8 btmp = PMX0 | (USART_TXDIO << 1) | (USART_RXDIO);
	PMX0 = 0x80;
	PMX0 = btmp;
#endif

	UCSR0A 	= (USART_MPCM0 << MPCM0) | (USART_U2X0 << U2X0);
 154:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>

	
	UCSR0C = (USART_UMSEL0 << UMSEL00 ) | (USART_UPM0 << UPM00) | (USART_USBS0 << USBS0) | \
 158:	86 e0       	ldi	r24, 0x06	; 6
 15a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
		((USART_UCSZ0 & 3) << UCSZ00 ) | (USART_UCPOL0 << UCPOL0);
	UCSR0B = USART_TXREN | (USART_UCSZ0 & 4) | (USART_RXC << RXCIE0) | (USART_TXC << TXCIE0) | (USART_UDRE << UDRIE0);
 15e:	88 e1       	ldi	r24, 0x18	; 24
 160:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	
	UBRR0H = (USART_UBRR >> 8) & 0xff;
 164:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = USART_UBRR & 0xff;
 168:	84 e0       	ldi	r24, 0x04	; 4
 16a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 16e:	08 95       	ret

00000170 <DrvUSART_SendChar>:
/**
 * @fn void DrvUSART_TransChar(u8 u8Char)
 */
void DrvUSART_SendChar(u8 u8Char)
{
	while(!(UCSR0A & (1 << UDRE0)));
 170:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 174:	95 ff       	sbrs	r25, 5
 176:	fc cf       	rjmp	.-8      	; 0x170 <DrvUSART_SendChar>
	UDR0 = u8Char;
 178:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 17c:	08 95       	ret

0000017e <DrvUSART_GetChar>:
/**
 * @fn u8 DrvUSART_RecvChar(void)
 */
u8 DrvUSART_GetChar(void)
{
	while(!(UCSR0A & (1 << RXC0)));
 17e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 182:	88 23       	and	r24, r24
 184:	e4 f7       	brge	.-8      	; 0x17e <DrvUSART_GetChar>
	return UDR0;
 186:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 18a:	08 95       	ret

0000018c <DrvUSART_SendStr>:

/**
 * @fn void DrvUSART_SendStr(char *str)
 */
void DrvUSART_SendStr(char *str)
{
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	ec 01       	movw	r28, r24
	char *pt = str;

	while(*pt)
 192:	03 c0       	rjmp	.+6      	; 0x19a <DrvUSART_SendStr+0xe>
	{
		DrvUSART_SendChar(*pt++);
 194:	21 96       	adiw	r28, 0x01	; 1
 196:	0e 94 b8 00 	call	0x170	; 0x170 <DrvUSART_SendChar>
 */
void DrvUSART_SendStr(char *str)
{
	char *pt = str;

	while(*pt)
 19a:	88 81       	ld	r24, Y
 19c:	81 11       	cpse	r24, r1
 19e:	fa cf       	rjmp	.-12     	; 0x194 <DrvUSART_SendStr+0x8>
	{
		DrvUSART_SendChar(*pt++);
	}
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret

000001a6 <expanderWrite>:

void setBacklight(uint8_t new_val){
	if(new_val){
		backlight();		// turn backlight on
		}else{
		noBacklight();		// turn backlight off
 1a6:	ec eb       	ldi	r30, 0xBC	; 188
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	90 81       	ld	r25, Z
 1ac:	9f 70       	andi	r25, 0x0F	; 15
 1ae:	90 6a       	ori	r25, 0xA0	; 160
 1b0:	90 83       	st	Z, r25
 1b2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b6:	99 23       	and	r25, r25
 1b8:	e4 f7       	brge	.-8      	; 0x1b2 <expanderWrite+0xc>
 1ba:	9e e4       	ldi	r25, 0x4E	; 78
 1bc:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1c0:	ec eb       	ldi	r30, 0xBC	; 188
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	90 81       	ld	r25, Z
 1c6:	9f 70       	andi	r25, 0x0F	; 15
 1c8:	90 68       	ori	r25, 0x80	; 128
 1ca:	90 83       	st	Z, r25
 1cc:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d0:	99 23       	and	r25, r25
 1d2:	e4 f7       	brge	.-8      	; 0x1cc <expanderWrite+0x26>
 1d4:	88 60       	ori	r24, 0x08	; 8
 1d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1da:	ec eb       	ldi	r30, 0xBC	; 188
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	8f 70       	andi	r24, 0x0F	; 15
 1e2:	80 68       	ori	r24, 0x80	; 128
 1e4:	80 83       	st	Z, r24
 1e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ea:	88 23       	and	r24, r24
 1ec:	e4 f7       	brge	.-8      	; 0x1e6 <expanderWrite+0x40>
 1ee:	ec eb       	ldi	r30, 0xBC	; 188
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	8f 70       	andi	r24, 0x0F	; 15
 1f6:	80 6d       	ori	r24, 0xD0	; 208
 1f8:	80 83       	st	Z, r24
 1fa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1fe:	84 ff       	sbrs	r24, 4
 200:	fc cf       	rjmp	.-8      	; 0x1fa <expanderWrite+0x54>
 202:	08 95       	ret

00000204 <pulseEnable>:
 204:	cf 93       	push	r28
 206:	c8 2f       	mov	r28, r24
 208:	84 60       	ori	r24, 0x04	; 4
 20a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <expanderWrite>
 20e:	83 e0       	ldi	r24, 0x03	; 3
 210:	8a 95       	dec	r24
 212:	f1 f7       	brne	.-4      	; 0x210 <pulseEnable+0xc>
 214:	00 00       	nop
 216:	8c 2f       	mov	r24, r28
 218:	8b 7f       	andi	r24, 0xFB	; 251
 21a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <expanderWrite>
 21e:	89 e9       	ldi	r24, 0x99	; 153
 220:	8a 95       	dec	r24
 222:	f1 f7       	brne	.-4      	; 0x220 <pulseEnable+0x1c>
 224:	00 c0       	rjmp	.+0      	; 0x226 <pulseEnable+0x22>
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <write4bits>:
 22a:	cf 93       	push	r28
 22c:	c8 2f       	mov	r28, r24
 22e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <expanderWrite>
 232:	8c 2f       	mov	r24, r28
 234:	0e 94 02 01 	call	0x204	; 0x204 <pulseEnable>
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <send>:
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	16 2f       	mov	r17, r22
 244:	98 2f       	mov	r25, r24
 246:	90 7f       	andi	r25, 0xF0	; 240
 248:	20 e1       	ldi	r18, 0x10	; 16
 24a:	82 9f       	mul	r24, r18
 24c:	e0 01       	movw	r28, r0
 24e:	11 24       	eor	r1, r1
 250:	89 2f       	mov	r24, r25
 252:	86 2b       	or	r24, r22
 254:	0e 94 15 01 	call	0x22a	; 0x22a <write4bits>
 258:	8c 2f       	mov	r24, r28
 25a:	81 2b       	or	r24, r17
 25c:	0e 94 15 01 	call	0x22a	; 0x22a <write4bits>
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	1f 91       	pop	r17
 266:	08 95       	ret

00000268 <clear>:
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 1e 01 	call	0x23c	; 0x23c <send>
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	91 e1       	ldi	r25, 0x11	; 17
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <clear+0xc>
 278:	00 c0       	rjmp	.+0      	; 0x27a <clear+0x12>
 27a:	00 00       	nop
 27c:	08 95       	ret

0000027e <lcdSendChar>:
	}
}

void lcdSendChar(char u8Char)
{
	send(u8Char, 1);
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	0e 94 1e 01 	call	0x23c	; 0x23c <send>
 284:	08 95       	ret

00000286 <lcdSendStr>:
}



void lcdSendStr(char *str)
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	ec 01       	movw	r28, r24
	char *pt = str;

	while(*pt)
 28c:	03 c0       	rjmp	.+6      	; 0x294 <lcdSendStr+0xe>
	{
		lcdSendChar(*pt++);
 28e:	21 96       	adiw	r28, 0x01	; 1
 290:	0e 94 3f 01 	call	0x27e	; 0x27e <lcdSendChar>

void lcdSendStr(char *str)
{
	char *pt = str;

	while(*pt)
 294:	88 81       	ld	r24, Y
 296:	81 11       	cpse	r24, r1
 298:	fa cf       	rjmp	.-12     	; 0x28e <lcdSendStr+0x8>
	{
		lcdSendChar(*pt++);
	}
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <lcd_inicio>:
 2a0:	2f ef       	ldi	r18, 0xFF	; 255
 2a2:	87 e6       	ldi	r24, 0x67	; 103
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	80 40       	sbci	r24, 0x00	; 0
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <lcd_inicio+0x6>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <lcd_inicio+0x10>
 2b0:	00 00       	nop
   * * * * * * * * * * * * * * 
   Inicializa de acuerdo al datasheet VISHAY
   */
void lcd_inicio(){
	_delay_ms(50);
	send(0x30, 0);	//Function set
 2b2:	60 e0       	ldi	r22, 0x00	; 0
 2b4:	80 e3       	ldi	r24, 0x30	; 48
 2b6:	0e 94 1e 01 	call	0x23c	; 0x23c <send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ba:	2b e7       	ldi	r18, 0x7B	; 123
 2bc:	2a 95       	dec	r18
 2be:	f1 f7       	brne	.-4      	; 0x2bc <lcd_inicio+0x1c>
	_delay_us(40);
	send(0x20, 0);	//Function set
 2c0:	60 e0       	ldi	r22, 0x00	; 0
 2c2:	80 e2       	ldi	r24, 0x20	; 32
 2c4:	0e 94 1e 01 	call	0x23c	; 0x23c <send>
	send(0x80, 0);	//LINEAS 2, FUENTE 5X8 PUNTOS
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	80 e8       	ldi	r24, 0x80	; 128
 2cc:	0e 94 1e 01 	call	0x23c	; 0x23c <send>
 2d0:	8b e7       	ldi	r24, 0x7B	; 123
 2d2:	8a 95       	dec	r24
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <lcd_inicio+0x32>
	_delay_us(40);
	send(0x20, 0);	//Function set
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	80 e2       	ldi	r24, 0x20	; 32
 2da:	0e 94 1e 01 	call	0x23c	; 0x23c <send>
	send(0x80, 0);	//LINEAS = 2, FUENTE = 5X8 PUNTOS
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	80 e8       	ldi	r24, 0x80	; 128
 2e2:	0e 94 1e 01 	call	0x23c	; 0x23c <send>
 2e6:	9b e7       	ldi	r25, 0x7B	; 123
 2e8:	9a 95       	dec	r25
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <lcd_inicio+0x48>
	_delay_us(40);
	send(0x00, 0);	//Display ON/OFF control
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	0e 94 1e 01 	call	0x23c	; 0x23c <send>
	send(0xf0, 0);	// set display, cursor, blinking
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	80 ef       	ldi	r24, 0xF0	; 240
 2f8:	0e 94 1e 01 	call	0x23c	; 0x23c <send>
 2fc:	2b e7       	ldi	r18, 0x7B	; 123
 2fe:	2a 95       	dec	r18
 300:	f1 f7       	brne	.-4      	; 0x2fe <lcd_inicio+0x5e>
	_delay_us(40);
	send(0x00, 0);	//Display clear
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 1e 01 	call	0x23c	; 0x23c <send>
	send(0x10, 0);
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	80 e1       	ldi	r24, 0x10	; 16
 30e:	0e 94 1e 01 	call	0x23c	; 0x23c <send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 312:	8f ef       	ldi	r24, 0xFF	; 255
 314:	91 e1       	ldi	r25, 0x11	; 17
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <lcd_inicio+0x76>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <lcd_inicio+0x7c>
 31c:	00 00       	nop
	_delay_ms(2);
	send(0x00, 0);	//Entry mode set
 31e:	60 e0       	ldi	r22, 0x00	; 0
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 1e 01 	call	0x23c	; 0x23c <send>
	send(0x40, 0);	// i/d , sh 
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	80 e4       	ldi	r24, 0x40	; 64
 32a:	0e 94 1e 01 	call	0x23c	; 0x23c <send>
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	91 e1       	ldi	r25, 0x11	; 17
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <lcd_inicio+0x92>
 336:	00 c0       	rjmp	.+0      	; 0x338 <lcd_inicio+0x98>
 338:	00 00       	nop
 33a:	08 95       	ret

0000033c <leeUART>:
	}
	return 0;
}


void leeUART(){
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
	int i=0;
	char contLF=2;
 342:	12 e0       	ldi	r17, 0x02	; 2
	return 0;
}


void leeUART(){
	int i=0;
 344:	c0 e0       	ldi	r28, 0x00	; 0
 346:	d0 e0       	ldi	r29, 0x00	; 0
	char contLF=2;
	char caracter;
	while(contLF){
 348:	10 c0       	rjmp	.+32     	; 0x36a <leeUART+0x2e>
		caracter = DrvUSART_GetChar();
 34a:	0e 94 bf 00 	call	0x17e	; 0x17e <DrvUSART_GetChar>
		if (caracter==0x0a) // Si caracter es igual a line feed
 34e:	8a 30       	cpi	r24, 0x0A	; 10
 350:	39 f4       	brne	.+14     	; 0x360 <leeUART+0x24>
		{
			contLF--;
 352:	11 50       	subi	r17, 0x01	; 1
			INBUFF[i]=caracter;
 354:	fe 01       	movw	r30, r28
 356:	e3 5e       	subi	r30, 0xE3	; 227
 358:	fe 4f       	sbci	r31, 0xFE	; 254
 35a:	80 83       	st	Z, r24
			i++;
 35c:	21 96       	adiw	r28, 0x01	; 1
 35e:	05 c0       	rjmp	.+10     	; 0x36a <leeUART+0x2e>
		} 
		else
		{
			INBUFF[i]=caracter;
 360:	fe 01       	movw	r30, r28
 362:	e3 5e       	subi	r30, 0xE3	; 227
 364:	fe 4f       	sbci	r31, 0xFE	; 254
 366:	80 83       	st	Z, r24
			i++;
 368:	21 96       	adiw	r28, 0x01	; 1

void leeUART(){
	int i=0;
	char contLF=2;
	char caracter;
	while(contLF){
 36a:	11 11       	cpse	r17, r1
 36c:	ee cf       	rjmp	.-36     	; 0x34a <leeUART+0xe>
			INBUFF[i]=caracter;
			i++;
		}
		
	}
}
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	1f 91       	pop	r17
 374:	08 95       	ret

00000376 <showBuff>:

void showBuff(){
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
	int i=0;
	int contLF=2;
	char caracter=0x00;
	clear();
 37e:	0e 94 34 01 	call	0x268	; 0x268 <clear>
	}
}

void showBuff(){
	int i=0;
	int contLF=2;
 382:	02 e0       	ldi	r16, 0x02	; 2
 384:	10 e0       	ldi	r17, 0x00	; 0
		
	}
}

void showBuff(){
	int i=0;
 386:	c0 e0       	ldi	r28, 0x00	; 0
 388:	d0 e0       	ldi	r29, 0x00	; 0
	int contLF=2;
	char caracter=0x00;
	clear();
	while(contLF)
 38a:	17 c0       	rjmp	.+46     	; 0x3ba <showBuff+0x44>
	{
		caracter = INBUFF[i];
 38c:	fe 01       	movw	r30, r28
 38e:	e3 5e       	subi	r30, 0xE3	; 227
 390:	fe 4f       	sbci	r31, 0xFE	; 254
 392:	80 81       	ld	r24, Z
		if (caracter==0x0a)
 394:	8a 30       	cpi	r24, 0x0A	; 10
 396:	39 f4       	brne	.+14     	; 0x3a6 <showBuff+0x30>
		{
			contLF--;
 398:	01 50       	subi	r16, 0x01	; 1
 39a:	11 09       	sbc	r17, r1
			lcdSendStr("lf");
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	91 e0       	ldi	r25, 0x01	; 1
 3a0:	0e 94 43 01 	call	0x286	; 0x286 <lcdSendStr>
 3a4:	09 c0       	rjmp	.+18     	; 0x3b8 <showBuff+0x42>
		} 
		else
		{
			if (caracter==0x0d)
 3a6:	8d 30       	cpi	r24, 0x0D	; 13
 3a8:	29 f4       	brne	.+10     	; 0x3b4 <showBuff+0x3e>
			{
				lcdSendStr("cr");
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	0e 94 43 01 	call	0x286	; 0x286 <lcdSendStr>
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <showBuff+0x42>
			} 
			else
			{
				lcdSendChar(caracter);
 3b4:	0e 94 3f 01 	call	0x27e	; 0x27e <lcdSendChar>
			}
		}
		i++;
 3b8:	21 96       	adiw	r28, 0x01	; 1
void showBuff(){
	int i=0;
	int contLF=2;
	char caracter=0x00;
	clear();
	while(contLF)
 3ba:	01 15       	cp	r16, r1
 3bc:	11 05       	cpc	r17, r1
 3be:	31 f7       	brne	.-52     	; 0x38c <showBuff+0x16>
				lcdSendChar(caracter);
			}
		}
		i++;
	}
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	1f 91       	pop	r17
 3c6:	0f 91       	pop	r16
 3c8:	08 95       	ret

000003ca <main>:
void showBuff(void);


int main(void)
{
	DrvSYS_Init();
 3ca:	0e 94 5b 00 	call	0xb6	; 0xb6 <DrvSYS_Init>
	// Device initialization
	//p init_modules(); //del builder
	DrvUSART_Init(); //  Inicializa USART
 3ce:	0e 94 aa 00 	call	0x154	; 0x154 <DrvUSART_Init>
	DrvTWI_Init(); // Inicializa  modulo i2c
 3d2:	0e 94 98 00 	call	0x130	; 0x130 <DrvTWI_Init>
	lcd_inicio();	// Inicializa pantalla LCD con i2c
 3d6:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_inicio>
	//lcd_init(LCD_DISP_ON); // Inicia OLED
	// Global interrupt enable
	//p SEI();
	DDRD |= (0x01<<PORTD1);
 3da:	8a b1       	in	r24, 0x0a	; 10
 3dc:	82 60       	ori	r24, 0x02	; 2
 3de:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x02;
 3e0:	82 e0       	ldi	r24, 0x02	; 2
 3e2:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0xff;
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x01;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	85 b9       	out	0x05, r24	; 5
 3ec:	2f ef       	ldi	r18, 0xFF	; 255
 3ee:	8f e0       	ldi	r24, 0x0F	; 15
 3f0:	9e e0       	ldi	r25, 0x0E	; 14
 3f2:	21 50       	subi	r18, 0x01	; 1
 3f4:	80 40       	sbci	r24, 0x00	; 0
 3f6:	90 40       	sbci	r25, 0x00	; 0
 3f8:	e1 f7       	brne	.-8      	; 0x3f2 <main+0x28>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <main+0x32>
 3fc:	00 00       	nop
	_delay_ms(500);
	PORTB = 0x00;
 3fe:	15 b8       	out	0x05, r1	; 5


	
// Mensaje inicial al arrancar
	clear(); // Limpia LCD
 400:	0e 94 34 01 	call	0x268	; 0x268 <clear>
	lcdSendStr("BALATRON INDUSTR");
 404:	86 e0       	ldi	r24, 0x06	; 6
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	0e 94 43 01 	call	0x286	; 0x286 <lcdSendStr>
	*/

	while (1)
	{
		
		DrvUSART_SendStr("at\r\n");
 40c:	87 e1       	ldi	r24, 0x17	; 23
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	0e 94 c6 00 	call	0x18c	; 0x18c <DrvUSART_SendStr>
		leeUART();
 414:	0e 94 9e 01 	call	0x33c	; 0x33c <leeUART>
		showBuff();
 418:	0e 94 bb 01 	call	0x376	; 0x376 <showBuff>
 41c:	2f ef       	ldi	r18, 0xFF	; 255
 41e:	8f e0       	ldi	r24, 0x0F	; 15
 420:	9e e0       	ldi	r25, 0x0E	; 14
 422:	21 50       	subi	r18, 0x01	; 1
 424:	80 40       	sbci	r24, 0x00	; 0
 426:	90 40       	sbci	r25, 0x00	; 0
 428:	e1 f7       	brne	.-8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 42c:	00 00       	nop
 42e:	ee cf       	rjmp	.-36     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>

00000430 <__udivmodhi4>:
 430:	aa 1b       	sub	r26, r26
 432:	bb 1b       	sub	r27, r27
 434:	51 e1       	ldi	r21, 0x11	; 17
 436:	07 c0       	rjmp	.+14     	; 0x446 <__udivmodhi4_ep>

00000438 <__udivmodhi4_loop>:
 438:	aa 1f       	adc	r26, r26
 43a:	bb 1f       	adc	r27, r27
 43c:	a6 17       	cp	r26, r22
 43e:	b7 07       	cpc	r27, r23
 440:	10 f0       	brcs	.+4      	; 0x446 <__udivmodhi4_ep>
 442:	a6 1b       	sub	r26, r22
 444:	b7 0b       	sbc	r27, r23

00000446 <__udivmodhi4_ep>:
 446:	88 1f       	adc	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	5a 95       	dec	r21
 44c:	a9 f7       	brne	.-22     	; 0x438 <__udivmodhi4_loop>
 44e:	80 95       	com	r24
 450:	90 95       	com	r25
 452:	bc 01       	movw	r22, r24
 454:	cd 01       	movw	r24, r26
 456:	08 95       	ret

00000458 <_exit>:
 458:	f8 94       	cli

0000045a <__stop_program>:
 45a:	ff cf       	rjmp	.-2      	; 0x45a <__stop_program>
