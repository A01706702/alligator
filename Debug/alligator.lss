
alligator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000018a  000001fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c0d  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000935  00000000  00000000  00000f21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000643  00000000  00000000  00001856  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00001e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f7  00000000  00000000  00001fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e2  00000000  00000000  000024b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002795  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e8       	ldi	r30, 0x8A	; 138
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  9e:	0c 94 c3 00 	jmp	0x186	; 0x186 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DrvCLK_SetClockDivider>:
 */


void DrvCLK_SetClockDivider(u8 u8ClkDiv)
{
	u8 btmp = 0x80 | (u8ClkDiv & 0xf);
  a6:	8f 70       	andi	r24, 0x0F	; 15
  a8:	80 68       	ori	r24, 0x80	; 128

	CLKPR = 0x80;
  aa:	e1 e6       	ldi	r30, 0x61	; 97
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	90 e8       	ldi	r25, 0x80	; 128
  b0:	90 83       	st	Z, r25
	CLKPR = btmp;
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <DrvSYS_Init>:
**********************************************************************************/  
/**
 * @fn void DrvSYS_Init(void)
 */
void DrvSYS_Init(void)
{
  b6:	cf 93       	push	r28
	u8	btmp;

	// step 1. enable clock sources
	btmp = PMCR | MCK_CLKENA;
  b8:	e2 ef       	ldi	r30, 0xF2	; 242
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	84 60       	ori	r24, 0x04	; 4
	PMCR = 0x80;
  c0:	c0 e8       	ldi	r28, 0x80	; 128
  c2:	c0 83       	st	Z, r28
	PMCR = btmp;
  c4:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	98 e0       	ldi	r25, 0x08	; 8
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <DrvSYS_Init+0x14>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <DrvSYS_Init+0x1a>
  d0:	00 00       	nop
#if (MCK_OSCKEN == 1) && (MCK_MCLKSEL == 3)
	_delay_ms(20);
#endif

	// step 2. configure main clock
	btmp = (PMCR & 0x9f) | ((MCK_MCLKSEL & 0x3) << 5);
  d2:	80 81       	ld	r24, Z
  d4:	8f 79       	andi	r24, 0x9F	; 159
  d6:	80 62       	ori	r24, 0x20	; 32
	PMCR = 0x80;
  d8:	c0 83       	st	Z, r28
	PMCR = btmp;
  da:	80 83       	st	Z, r24
	
	NOP(); NOP();
  dc:	00 00       	nop
  de:	00 00       	nop

#if (MCK_CLKDIV != 3)
	DrvCLK_SetClockDivider(MCK_CLKDIV);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <DrvCLK_SetClockDivider>
#if (SYS_SWDD == 1)
	DrvMISC_DisableSWD();
#endif

#if (SYS_C6EN == 1) || (SYS_E6EN == 1)
	btmp = PMX2 | (SYS_E6EN << 1) | SYS_C6EN;
  e8:	e0 ef       	ldi	r30, 0xF0	; 240
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	82 60       	ori	r24, 0x02	; 2
	PMX2 = 0x80;
  f0:	c0 83       	st	Z, r28
	PMX2 = btmp;
  f2:	80 83       	st	Z, r24
#endif

#if (MCK_CKOSEL == 2)
	CLKPR |= 0x20;
#endif
}
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <DrvUSART_Init>:
 */
u8 DrvUSART_GetChar(void)
{
	while(!(UCSR0A & (1 << RXC0)));
	return UDR0;
}
  f8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  fc:	86 e0       	ldi	r24, 0x06	; 6
  fe:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 102:	88 e1       	ldi	r24, 0x18	; 24
 104:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 108:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 112:	08 95       	ret

00000114 <DrvUSART_SendChar>:
 114:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 118:	95 ff       	sbrs	r25, 5
 11a:	fc cf       	rjmp	.-8      	; 0x114 <DrvUSART_SendChar>
 11c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 120:	08 95       	ret

00000122 <DrvUSART_SendStr>:

/**
 * @fn void DrvUSART_SendStr(char *str)
 */
void DrvUSART_SendStr(char *str)
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	ec 01       	movw	r28, r24
	char *pt = str;

	while(*pt)
 128:	03 c0       	rjmp	.+6      	; 0x130 <DrvUSART_SendStr+0xe>
	{
		DrvUSART_SendChar(*pt++);
 12a:	21 96       	adiw	r28, 0x01	; 1
 12c:	0e 94 8a 00 	call	0x114	; 0x114 <DrvUSART_SendChar>
 */
void DrvUSART_SendStr(char *str)
{
	char *pt = str;

	while(*pt)
 130:	88 81       	ld	r24, Y
 132:	81 11       	cpse	r24, r1
 134:	fa cf       	rjmp	.-12     	; 0x12a <DrvUSART_SendStr+0x8>
	{
		DrvUSART_SendChar(*pt++);
	}
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <main>:
void showBuff(void);


int main(void)
{
	DrvSYS_Init();
 13c:	0e 94 5b 00 	call	0xb6	; 0xb6 <DrvSYS_Init>
	// Device initialization
	//p init_modules(); //del builder
	DrvUSART_Init(); //  Inicializa USART
 140:	0e 94 7c 00 	call	0xf8	; 0xf8 <DrvUSART_Init>
	//DrvTWI_Init(); // Inicializa  modulo i2c
	//lcd_inicio();	// Inicializa pantalla LCD con i2c
	//lcd_init(LCD_DISP_ON); // Inicia OLED
	// Global interrupt enable
	//p SEI();
	DDRD |= (0x01<<PORTD1);
 144:	8a b1       	in	r24, 0x0a	; 10
 146:	82 60       	ori	r24, 0x02	; 2
 148:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x02;
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0xff;
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x01;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	85 b9       	out	0x05, r24	; 5
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	8f e0       	ldi	r24, 0x0F	; 15
 15a:	9e e0       	ldi	r25, 0x0E	; 14
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x20>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x2a>
 166:	00 00       	nop
	_delay_ms(500);
	PORTB = 0x00;
 168:	15 b8       	out	0x05, r1	; 5

	while (1)
	{
		
		//DrvUSART_SendChar(0x30);
		DrvUSART_SendStr("at\r\n");
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 91 00 	call	0x122	; 0x122 <DrvUSART_SendStr>
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	8f e0       	ldi	r24, 0x0F	; 15
 176:	9e e0       	ldi	r25, 0x0E	; 14
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0x3c>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x46>
 182:	00 00       	nop
 184:	f2 cf       	rjmp	.-28     	; 0x16a <main+0x2e>

00000186 <_exit>:
 186:	f8 94       	cli

00000188 <__stop_program>:
 188:	ff cf       	rjmp	.-2      	; 0x188 <__stop_program>
